AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String
  KMSKey:
    Type: String
  PrivateSubnet1:
    Type: String  
  PrivateSubnet2:
    Type: String
  DynamoDBLancamentos:
    Type: String
  DynamoDBConsolidado:
    Type: String
  ConsolidacaoQueueName:
    Type: String
  ConsolidacaoQueueArn:
    Type: String
  ConsolidacaoQueueDlqArn:
    Type: String
  S3Bucket:
    Type: String
  KMSKeyArn:
    Type: String
  DatabaseSecret:
    Type: String
  RedisEndpoint:
    Type: String
  RedisPort:
    Type: String
  LambdaSecurityGroup:
    Type: String

  S3BucketLambdas:
    Type: String
    Default: gft-challenge
  S3KeyLambdaLancamentos:
    Description: The name of the ZIP package
    Type: String
    Default: infra/lambdas/lancamentos.zip
  # S3ObjectVersionLambdaLancamentos:
  #   Description: The version ID of the ZIP package
  #   Type: String
  #   Default: .omWjkdg7FVf2xCmH0pc7YDtW3QLkQiA

  S3KeyLambdaConsolidado:
    Description: The name of the ZIP package
    Type: String
    Default: infra/lambdas/consolidado.zip
  # S3ObjectVersionLambdaConsolidado:
  #   Description: The version ID of the ZIP package
  #   Type: String
  #   Default: iNJsWqCQ4hteVmvxVfzcanHzvsKoGHQe

  S3XrayLayerKey:
    Type: String
    Default: infra/lambdas/xray.zip

  S3RedisLayerKey:
    Type: String
    Default: infra/lambdas/redis.zip

Resources:
  XRayLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: XRay
      Description: "x-ray SDK"
      CompatibleRuntimes:
        - python3.13
        - python3.12
        - python3.11
        - python3.10
        - python3.9
      Content:
        S3Bucket: 
          Ref: S3BucketLambdas
        S3Key:
          Ref: S3XrayLayerKey
        

  RedisLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: Redis
      Description: "Redis SDK"
      CompatibleRuntimes:
        - python3.13
        - python3.12
        - python3.11
        - python3.10
        - python3.9
      Content:
        S3Bucket: 
          Ref: S3BucketLambdas
        S3Key:
          Ref: S3RedisLayerKey        


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: DefaultPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: WriteLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:GetLogEvents
                  - logs:PutLogEvents
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:logs:'
                      - Ref: AWS::Region
                      - ':'
                      - Ref: AWS::AccountId
                      - ':*'
              - Sid: GeneralPermissions
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:CreateSecurityGroup
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteSecurityGroup
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - ecs:ModifyNetworkInterfaceAttribute
                Resource: '*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBLancamentos}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBLancamentos}/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBConsolidado}"
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !Ref ConsolidacaoQueueArn
                  - !Ref ConsolidacaoQueueDlqArn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'                  
        - PolicyName: KMSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !Ref KMSKeyArn
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DatabaseSecret
        - PolicyName: EventBridgeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: '*'
  
  
  LambdaLancamentos:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'lancamentos'
      Runtime: python3.10
      Handler: main.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DYNAMODB_TABLE_LANCAMENTOS: !Ref DynamoDBLancamentos
          SQS_QUEUE_URL: !Ref ConsolidacaoQueueName
          KMS_KEY_ID: !Ref KMSKey
          ENVIRONMENT: !Ref Environment
          REGION: !Ref AWS::Region
          ACCOUNT_ID: !Ref AWS::AccountId
          SECRET_NAME: !Ref DatabaseSecret
      Layers:
        - Ref: XRayLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      TracingConfig:
        Mode: Active
      Code:
        S3Bucket:
          Ref: S3BucketLambdas
        S3Key:
          Ref: S3KeyLambdaLancamentos
        # S3ObjectVersion:
        #   Ref: S3ObjectVersionLambdaLancamentos
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-lancamentos'
        - Key: Environment
          Value: !Ref Environment
    DependsOn:
      - LambdaExecutionRole
      - XRayLayer


  LambdaConsolidado:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'consolidado'
      Runtime: python3.10
      Handler: main.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          DYNAMODB_TABLE_CONSOLIDADO: !Ref DynamoDBConsolidado
          DYNAMODB_TABLE_LANCAMENTOS: !Ref DynamoDBLancamentos
          REDIS_ENDPOINT: !Ref RedisEndpoint
          REDIS_PORT: !Ref RedisPort
          S3_BUCKET: !Ref S3Bucket
          KMS_KEY_ID: !Ref KMSKey
          ENVIRONMENT: !Ref Environment
          REGION: !Ref AWS::Region
          ACCOUNT_ID: !Ref AWS::AccountId
          SECRET_NAME: !Ref DatabaseSecret
      Layers:
        - Ref: XRayLayer
        - Ref: RedisLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      TracingConfig:
        Mode: Active
      Code:      
        S3Bucket:
          Ref: S3BucketLambdas
        S3Key:
          Ref: S3KeyLambdaConsolidado
        # S3ObjectVersion:
        #   Ref: S3ObjectVersionLambdaConsolidado        
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-consolidado'
        - Key: Environment
          Value: !Ref Environment
    DependsOn:
      - LambdaExecutionRole
      - XRayLayer
      - RedisLayer

  # ===== EVENT SOURCE MAPPING =====
  SQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Ref ConsolidacaoQueueArn
      FunctionName: !GetAtt LambdaConsolidado.Arn
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5
    DependsOn:
      - LambdaConsolidado


Outputs:
  LambdaLancamentosArn:
    Value:
      Fn::GetAtt:
        - LambdaLancamentos
        - Arn

  LambdaConsolidadoArn:
    Value:
      Fn::GetAtt:
        - LambdaConsolidado
        - Arn